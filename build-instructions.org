#+title: Installation GSLL on CLL on Windows 7 using the MinGW compiler

  As guidance I am following the notes from Joe W. BiMedina's [[http://wnetai.wordpress.com/how-to-install-gsll_the-gnu-scientific-library-for-lisp-on-windows-7-and-windows-8/][blog
  post]].  I do not follow those instructions faithfully.  I use PATH,
  compiler switches, and the user lisp initialization (as in
  =.lisprc= or similar) for most of the customization.  Still some
  changes to lisp code in libraries downloaded via quicklisp are
  necessary.

  I can contact the blog author via [[http://wnetai.wordpress.com/about/][this wordpress link]]


* GSLL Installation notes on CLL + Windows 7			 


  I developed these steps by trial and error following Joe's blog as
  guide.  I would work until a compilation error.  I would examine
  the error for clues on how to proceed.

  In case of cffi/grovel/C error, the error message in slime was not
  informative enough.  I would copy the compilation command (visible
  in the error window) to the Windows Command shell and execute it.
  The error message would indicate what library or .h file is
  missing.  I would then modify the compilation environment or
  compiler switches to fix the error.

  Some errors suggested modification to the Grovel and Osicat
  libraries.  For those, the information on Joe's blog was
  invaluable.

  In the following, I use /JWBM/ to label steps that 
  substantially follow Joe's blog (with some modifications/additions
  of mine)

** External libraries

   For GSLL we need the GSL and LIBFFI libraries as DLL's.  I have
   generated the dll's myself by compiling and installing the
   sources in the Cygwin64 inveronment, using its mingw compiler
   tool kit.  The library building procedure is
   #+BEGIN_SRC shell
     ./configure --prefix=/e/fs --host=x86_64-w64-mingw32
     make
     make install
   #+END_SRC
   The posix tree root with libraries and include files is =E:/fs=.
   For the above to work, I had to define some environment variables
   #+BEGIN_SRC shell
     #!/bin/sh
     PREFIX=x86_64-w64-mingw32
     export CC=$PREFIX-gcc
     export CXX=$PREFIX-g++
     export CPP=$PREFIX-cpp
     export RANLIB=$PREFIX-ranlib
     exec "$@"
   #+END_SRC

   
*** Caveat utilitator
    I checked the GSL build running =make check=.  Three tests
    failed.  One each in =sys=, =vector=, =matrix=.  I need to clear
    that up with the GSL mailing list.

    In the end, once GSLL was installed, its error count did not seem
    excessive (see below).  Caution is still warranted.

** Windows PATH variable
   GSLL and CFFI will be compiling many files using the MinGW C
   compiler and its friends.  They will need to find the relevant
   libraries.  I point to them by adding these to the Windows path:
   - C:/Cygwin64/bin - for the compiler to function properly 
   - E:/fs/bin - for dll's
   - E:/fs/lib - for more dlls'

** =gsl-config.cmd= /JWBM/
   Create ~gsl-config.cmd~, the Windows equivalent of
   ~/e/fs/bin/gsl-config~ shell script auto-generated by the gsl
   build procedure and place it in the same directory.  This
   directory must be in Windows' PATH - see previous step.

   GSLL calls this routine to get information about the GSL
   installation.

   Make sure this file follows the Windows CR-LF line terminating
   convention.  I specify this for consistency sake.  There are some
   issues with the parsing of results returned by =gsl-config.cmd=
   (see below).  To resolve these, we need to follow a well defined
   line termination convention.

** Lisp libraries adjustments
*** OSICAT /JWBM/
    In osicat/posix/windows.lisp I added the following constant
    definitions as suggested by JWBM
    #+BEGIN_SRC lisp
      (defconstant s-iflnk -9000)
      (defconstant s-ifsock -9001)
      (defconstant s-irgrp -9002)
      (defconstant s-iwgrp -9003)
      (defconstant s-ixgrp -9004)
      (defconstant s-iroth -9005)
      (defconstant s-iwoth -9006)
      (defconstant s-ixoth -9007)
      (defconstant s-isuid -9008)
      (defconstant s-isgid -9009)
      (defconstant s-isvtx -9010)     
    #+END_SRC


    I found references to these in Cygwin's
    [[file:../../../../../../cygwin64/usr/include/sys/stat.h][/usr/include/sys/stat.h]].  Can I teach the groveller to parse
    that file instead of modifying osicat?
    
*** cffi/grovel grovel.lisp 
    - Modify ~cffi-grovel::*CC*~ to point to our compiler.  Use the
      full Windows path.  In my case it is
      =C:/cygwin64/bin/x86_64-w64-mingw32-gcc.exe=
      - /JWBM/
    - Modify ~cffi-grovel::*CC-FLAGS*~ with include paths:
      - ="-I" "E:/fs/lib/libffi-3.0.13/include/"=
      - ="-I" "C:/Users/977315/Documents/quicklisp/dists/quicklisp/software/cffi_0.13.0/"=
      - ="-I" "E:/fs/include/"=

*** cffi/libffi/libffi-win32.lisp
    Modify =abi= =cenum= by commenting out ~FFI_SYSV~ ~FFI_STDCALL~
    entries:
    #+BEGIN_SRC lisp
      (cenum abi
       ((:default-abi "FFI_DEFAULT_ABI"))
       #-windows((:sysv "FFI_SYSV"))
       #-windows((:stdcall "FFI_STDCALL")))     
    #+END_SRC

*** drakma, cl+ssl /JWBM/
    Drakma will try to link to libssl.dll.  I did try to install that
    library.  But for some reason that I do not recall, drakma still
    did not start up.  I then added =:drakma-no-ssl= to =*features*= in
    my lisp startup file

*** GSLL configuration

**** Modification to the =gsll.asd= and =libgsl-windows.lisp= /JWBM/

     ~libgsl-windows~
     In the cffi-grovel:grove-file section, add a selector for
     windows and specify "libgsl-windows":
     #+BEGIN_SRC lisp
       (cffi-grovel:grovel-file
	"libgsl" :pathname #+unix "libgsl-unix" #+windows "libgsl-windows"
	:depends-on ("init"))      
     #+END_SRC

     In gsl/init, copy ~libgsl-unix.lisp~ to ~libgsl-windows.lisp~.
     There are no modifications done to ~libgsl-windows.lisp~.  It is
     an exact copy.

**** =init/init.lisp= library definition

     Modify cffi:define-foreign-library definitions for libgsl and
     libgslcblas.  Add a windows option, and specify the name of the
     gsl's dlls that are found in =/e/fs/bin/=
     #+BEGIN_SRC lisp
       (cffi:define-foreign-library libgslcblas
	 (:darwin #+ccl #.(ccl:native-translated-namestring
			   (gsl-config-pathname "libgslcblas.dylib"))
		  #-ccl #.(gsl-config-pathname "libgslcblas.dylib"))
	 (:cygwin "cyggslcblas-0.dll")
	 (:unix (:or "libgslcblas.so.0" "libgslcblas.so"))
	 (:windows "libgslcblas-0.dll") ;;MV
	 (t (:default "libgslcblas")))

       (cffi:define-foreign-library libgsl
	 (:darwin #+ccl #.(ccl:native-translated-namestring
			    (gsl-config-pathname "libgsl.dylib"))
		  #-ccl #.(gsl-config-pathname "libgsl.dylib"))
	 (:cygwin "cyggsl-0.dll")
	 (:unix (:or "libgsl.so.0" "libgsl.so"))
	 (:windows "libgsl-0.dll") ;;MV
	 (t (:default "libgsl")))      
     #+END_SRC
     
**** init/init.lisp gsl-configuration

     Adapt =gsl-config= and =gsl-config-pathname= for Windows.  This
     is an ugly hack, and probably not necessary, since
     =gsl-config-pathname= is only called on =darwin=.  But still see
     below:

     gsl-config calls ~gsl-config.cmd~ which returns the result as a
     string.  gsl-config will get the string followed by =0x0D=
     (ctrl-M) character.  I don't understand why as my environemnt is
     completely window, and the =gsl-config.bat= file is in DOS mode.

     I added code so that under Windows, that last character is
     stripped.

     In addition we have to add a terminating slash to thus created
     path.  That is done in gsl-config-pathname.  

*** GSLL testing
    :PROPERTIES:
    :ID:       czkiifh02mg0
    :END:

    With the above, GSLL compiles.  I then proceded to run the tests.
    
    Initially, the tests caused CLL to crash.  I suspected the cause
    to be related to the GSL tests that failed - but see next.

    I tried to isolate the tests that caused the crash.  After a
    couple of attempts at tracing (and several CCL crashes), I
    finally turned on tracing of =lisp-unit='s =run-thunk= which
    runs individual tests.  With that trace on, all the tests
    completed -- CCL did not crash.

    Following that, the tests would all run with all traces removed.
    I get 77 failures and 6 execution errors.

    I then cleared the common-lisp cache, restarted CCL, recompiled
    everything, and ran the tests.
    #+BEGIN_SRC lisp
      (ql:quickload :lisp-unit)
      (ql:quickload :gsll)
      (in-package :gsll)
      (lisp-unit:run-tests)
    #+END_SRC
    Now the unit tests ran without CCL crashing.
    
